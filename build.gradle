apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
}

idea {
    module {
        excludeDirs = []
        [".idea", ".gradle", '.settings', 'build', 'biz/build', 'sns-common/build'
         , 'classes'].each {
            excludeDirs << file("$it")
        }
    }
}

configurations {
    //all { resolutionStrategy.cacheChangingModulesFor 1, 'minutes' }
}

dependencies {
    compile ("org.slf4j:slf4j-api:1.7.21")
    compile ("ch.qos.logback:logback-classic:1.1.3")
    compile ("org.apache.commons:commons-lang3:3.5")
    compile ("org.apache.httpcomponents:httpclient:4.5.3")
    compile ('org.apache.httpcomponents:httpmime:4.5.3')
    compile ("com.alibaba:fastjson:1.2.32")
    compile ("commons-collections:commons-collections:3.2.1")
    compile ("org.reflections:reflections:0.9.11")
    compile ("org.jsoup:jsoup:1.10.2")
    testCompile ("junit:junit:3.8.1")
    testCompile ("com.alibaba:druid:1.1.4")
    testCompile ('mysql:mysql-connector-java:6.0.6')
    //testCompile 'ws.schild:jave-all-deps:2.4.2'
}

ext{
    userName = ''
    password = ''
    releaseVersion = "-SNAPSHOT"
    println("releaseVersion:"+releaseVersion)
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.debug = "on"
    options.compilerArgs << "-XDignore.symbol.file"
    options.fork = true
    options.forkOptions.executable = 'javac'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
}

task cleanAll {
    doLast {
        println "Clean project.."
        delete buildDir
    }
}

task initOut {
    doLast{
        println '+------------------------------------------------------------------+'
        println '|                                                                  |'
        println "| B U I L D I N G $project.name $version$releaseVersion ...        |"
        println '|                                                                  |'
        println '+------------------------------------------------------------------+'
    }
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileJava.dependsOn([initOut])

task sourceJar(type: Jar) {
    classifier = 'sources'
    from(sourceSets.main.allSource){
        include("**")
    }
    archiveName = "$moduleName-${version}-sources.jar"
}

task buildJar(dependsOn: [cleanAll,jar],type: Jar){
    from({
        sourceSets.main.output.classesDir
    }){
        include("**")
    }
    archiveName = "$moduleName-${version}.jar"
}

task publishSnapshot(dependsOn: [buildJar, sourceJar, uploadArchives]) {
    doLast{
        println "Publish $moduleName $version SUCCESS"
    }
}

task publish(dependsOn: [buildJar,sourceJar, uploadArchives]) {
    doLast{
        println "Publish $moduleName $version SUCCESS"
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(":publishSnapshot") && !version.endsWith('-SNAPSHOT')) {
        version ="$version"+ '-SNAPSHOT'
    }
    if(taskGraph.hasTask("publish")){
        println "publish"
        version ="$version"
        userName = ''
        password = ''
    }
    if (taskGraph.hasTask(":publishSnapshot") || taskGraph.hasTask(":publish")){
        artifacts {
            archives buildJar
            archives sourceJar
        }
    }
    uploadArchives {
        repositories {
            mavenDeployer {
                println "$version"

                repository(url: 'http://nexus.51caocao.cn/content/repositories/releases') {
                    authentication(userName: '', password: '')
                }

                snapshotRepository(url: 'http://nexus.51caocao.cn/content/repositories/snapshots') {
                    authentication(userName: '', password: '')
                }
                uniqueVersion = true
                pom.groupId = "com.occultation.www"
                pom.artifactId = "$moduleName"
            }
        }
    }
}


